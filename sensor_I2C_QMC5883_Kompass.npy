# QMC5883 Compass Module, Adress 0x0d
#
# Adaption for Oxocard and NanoPython
# by HP Dietrich
# Output the raw x,y,z values


i:byte
AddrQMC:byte = 0x0D
data:byte[6]
heading:float
h:float
x:int
y:int
z:int

# Scan I2C Bus
#i = 0
#while i < 127
#  if checkI2CAddress(i)
#    print "Adresse" 
#    print i 
#  i++
    

# writeI2CByte(AddrQMC, 0x0A, 0x80) # Soft reset
writeI2CByte(AddrQMC, 0x0B, 0x01) # Soft reset period
writeI2CByte(AddrQMC, 0x09, 0b00011101) # 0x1D = OSR 512, Range 8 Gauss, ODR 200Hz, Continous Mode
# writeI2CByte(AddrQMC, 0x09, 0b00011001) # OSR 512, Range 8 Gauss, ODR 100Hz, Continous Mode
# writeI2CByte(AddrQMC, 0x09, 0b01001001) # OSR 256, Range 2 Gauss, ODR 100Hz, Continous Mode


delay 200

def onDraw()
  clear()
  readI2C(AddrQMC,0x00, 7)
  buf:long[6]
  for i in 6: buf[i] = getI2CByte()
  x = (buf[1]<<8 | buf[0])
  y = (buf[3]<<8 | buf[2])
  z = (buf[5]<<8 | buf[4])
  # (Raw values without calibration)
  
  # sixteenBitNumber = (upperByte<<8) | lowerByte;
  # sixteenBitNumber = 256*upperByte + lowerByte;
  

  # Replacement for ATan2(y,x)
  if x > 0; h = y / x
  if x < 0; h = y / x + 3.14
  heading = atan(h)
  
  heading = toInt(heading * 57.3)
  
  if(heading < 0) heading +=360;
 
  #textFont(FONT_ROBOTO_16)
  #drawText(150,10, buf[1])
  #drawText(150,40, buf[0])
  #drawText(150,70, buf[3])
  #drawText(150,100, buf[2])
  #drawText(150,130, buf[5])
  #drawText(150,160, buf[4])


  textFont(FONT_ROBOTO_32)
  drawText(10,00,"X=" + x)
  drawText(10,35,"Y=" + y)
  drawText(10,70,"Z=" + z)

  drawText(10,125,"Heading")
  textFont(FONT_ROBOTO_BOLD_48)
  drawText(10,160,heading)
  if getButton():
        if returnToMenu():
            return
  delay(500)
  update()
  